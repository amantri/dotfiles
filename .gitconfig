[user]
    name = amantri
    email = 829820+amantri@users.noreply.github.com

[pull]
    rebase = true

[alias]
    # Convenience shortcuts
    s = status
    co = checkout
    br = branch
    sw = switch

    # Sample usage:
    #   git meld [-d] [<commit>]
    #     e.g. git meld -d origin/main # Opens a directory diff view of all changes relative to origin/main
    meld = difftool

    # Start a new branch with given name at origin/main's HEAD
    # Usage: git start new_branch
    start = "!f () { git checkout -b $1 origin/main --no-track; }; f"

    # Show the "pretty" log for the current branch. Add --all to see it for all branches
    # Usage: git logp [--all]
    # Documentation: https://git-scm.com/docs/pretty-formats
    logp = log --graph --pretty=format:'%C(auto)%h%Creset%C(auto)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    l = logp

    # List names of files that have changed
    # Sample usage:
    # 	git ls [--cached]  # list filenames that have changed in current branch
    # 	git ls origin/main # list filenames that have changed compared to origin/main
    ls = diff --name-only

# Configure meld as a diff and merge tool.
# From https://stackoverflow.com/questions/34119866/setting-up-and-using-meld-as-your-git-difftool-and-mergetool
[diff]
    tool = meld
    submodule = diff
[difftool]
    prompt = false
[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"
[merge]
    tool = meld
[mergetool "meld"]
    # Choose one of these 2 lines (not both!). MERGED=partially merged file, BASE=shared commit ancestor
    cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
    # cmd = meld "$LOCAL" "$BASE" "$REMOTE" --output "$MERGED"
[init]
	defaultBranch = main

